#include <iostream>
#include <vector>
#include <queue>
#include <sstream>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};
void recursion(TreeNode *root, int level, vector<int> &res)
    {
        if(root==NULL) return ;
        if(res.size()==level) res.push_back(root->val);
        recursion(root->right, level+1, res);
        recursion(root->left, level+1, res);
    }
vector<int> rightSideView(TreeNode* root) {
    vector<int> res;
        recursion(root, 0, res);
        return res;
}

TreeNode* createTree(vector<string>& nodes) {
    if (nodes.empty()) return nullptr;

    TreeNode* root = new TreeNode(stoi(nodes[0]));
    queue<TreeNode*> q;
    q.push(root);
    size_t i = 1;

    while (!q.empty() && i < nodes.size()) {
        TreeNode* current = q.front();
        q.pop();

        if (nodes[i] != "N") {
            current->left = new TreeNode(stoi(nodes[i]));
            q.push(current->left);
        }
        ++i;

        if (i < nodes.size() && nodes[i] != "N") {
            current->right = new TreeNode(stoi(nodes[i]));
            q.push(current->right);
        }
        ++i;
    }

    return root;
}

int main() {
    string input;
    getline(cin, input);
    istringstream iss(input);
    vector<string> nodes;
    string val;
    while (iss >> val) {
        nodes.push_back(val);
    }
    TreeNode* root = createTree(nodes);
    vector<int> result = rightSideView(root);
    for (int i = 0; i < result.size(); ++i) {
        cout << result[i]<<" ";
    }
    return 0;
}
